use <conway.scad>

// Access Archimedean solid geometry by index (range of [1:13]), ordered alphabetically
function ArchimedeanSolid(n) = 
    let(full_list = [Cuboctahedron(),Icosidodecahedron(),LsnubCube(),Rhombicosidodecahedron(),Rhombicuboctahedron(),RsnubDodecahedron(),TruncatedCube(),TruncatedCuboctahedron(),TruncatedDodecahedron(),TruncatedIcosahedron(),TruncatedIcosidodecahedron(),TruncatedOctahedron(),TruncatedTetrahedron()])
    full_list[n-1];

function Cuboctahedron() = 
// source:  http://dmccooey.com/polyhedra/Cuboctahedron.txt
// generated by  http://kitwallace.co.uk/3d/solid-index.xq
let(C0 = 0.7071067811865475244008443621048)
poly(name = "Cuboctahedron",
// 4 sided faces = 6
// 3 sided faces = 8
vertices = [
[ C0, 0.0,  C0],
[ C0, 0.0, -C0],
[-C0, 0.0,  C0],
[-C0, 0.0, -C0],
[ C0,  C0, 0.0],
[ C0, -C0, 0.0],
[-C0,  C0, 0.0],
[-C0, -C0, 0.0],
[0.0,  C0,  C0],
[0.0,  C0, -C0],
[0.0, -C0,  C0],
[0.0, -C0, -C0]],
faces = [
[  4 ,  1,  5,  0],
[ 10 ,  2,  8,  0],
[  3 ,  6,  2,  7],
[ 10 ,  5, 11,  7],
[  3 , 11,  1,  9],
[  4 ,  8,  6,  9],
[  8 ,  4,  0],
[ 11 ,  5,  1],
[ 10 ,  7,  2],
[  9 ,  6,  3],
[  9 ,  1,  4],
[ 10 ,  0,  5],
[  8 ,  2,  6],
[ 11 ,  3,  7]]
);

function Icosidodecahedron() = 
// source:  http://dmccooey.com/polyhedra/Icosidodecahedron.txt
// generated by  http://kitwallace.co.uk/3d/solid-index.xq
let(C0 = 0.809016994374947424102293417183)
let(C1 = 1.30901699437494742410229341718)
let(C2 = 1.61803398874989484820458683437)
poly(name = "Icosidodecahedron",
// 5 sided faces = 12
// 3 sided faces = 20
vertices = [
[ 0.0,  0.0,   C2],
[ 0.0,  0.0,  -C2],
[  C2,  0.0,  0.0],
[ -C2,  0.0,  0.0],
[ 0.0,   C2,  0.0],
[ 0.0,  -C2,  0.0],
[ 0.5,   C0,   C1],
[ 0.5,   C0,  -C1],
[ 0.5,  -C0,   C1],
[ 0.5,  -C0,  -C1],
[-0.5,   C0,   C1],
[-0.5,   C0,  -C1],
[-0.5,  -C0,   C1],
[-0.5,  -C0,  -C1],
[  C1,  0.5,   C0],
[  C1,  0.5,  -C0],
[  C1, -0.5,   C0],
[  C1, -0.5,  -C0],
[ -C1,  0.5,   C0],
[ -C1,  0.5,  -C0],
[ -C1, -0.5,   C0],
[ -C1, -0.5,  -C0],
[  C0,   C1,  0.5],
[  C0,   C1, -0.5],
[  C0,  -C1,  0.5],
[  C0,  -C1, -0.5],
[ -C0,   C1,  0.5],
[ -C0,   C1, -0.5],
[ -C0,  -C1,  0.5],
[ -C0,  -C1, -0.5]],
faces = [
[  6 , 14, 16,  8,  0],
[ 12 , 20, 18, 10,  0],
[  9 , 17, 15,  7,  1],
[ 11 , 19, 21, 13,  1],
[ 14 , 22, 23, 15,  2],
[ 17 , 25, 24, 16,  2],
[ 19 , 27, 26, 18,  3],
[ 20 , 28, 29, 21,  3],
[ 27 , 11,  7, 23,  4],
[ 22 ,  6, 10, 26,  4],
[ 28 , 12,  8, 24,  5],
[ 25 ,  9, 13, 29,  5],
[ 10 ,  6,  0],
[  8 , 12,  0],
[ 13 ,  9,  1],
[  7 , 11,  1],
[ 16 , 14,  2],
[ 15 , 17,  2],
[ 21 , 19,  3],
[ 18 , 20,  3],
[ 23 , 22,  4],
[ 26 , 27,  4],
[ 24 , 25,  5],
[ 29 , 28,  5],
[ 22 , 14,  6],
[ 15 , 23,  7],
[ 16 , 24,  8],
[ 25 , 17,  9],
[ 18 , 26, 10],
[ 27 , 19, 11],
[ 28 , 20, 12],
[ 21 , 29, 13]]
);

function LsnubCube() = 
// source:  http://dmccooey.com/polyhedra/LsnubCube.txt
// generated by  http://kitwallace.co.uk/3d/solid-index.xq
let(C0 = 0.33775397381375235213753224516503)
let(C1 = 0.621226410556585311692500954490)
let(C2 = 1.14261350892596209347948408672)
poly(name = "Snub Cube",
// 4 sided faces = 6
// 3 sided faces = 32
vertices = [
[ C1,  C0,  C2],
[ C1, -C0, -C2],
[-C1, -C0,  C2],
[-C1,  C0, -C2],
[ C2,  C1,  C0],
[ C2, -C1, -C0],
[-C2, -C1,  C0],
[-C2,  C1, -C0],
[ C0,  C2,  C1],
[ C0, -C2, -C1],
[-C0, -C2,  C1],
[-C0,  C2, -C1],
[ C0, -C1,  C2],
[ C0,  C1, -C2],
[-C0,  C1,  C2],
[-C0, -C1, -C2],
[ C2, -C0,  C1],
[ C2,  C0, -C1],
[-C2,  C0,  C1],
[-C2, -C0, -C1],
[ C1, -C2,  C0],
[ C1,  C2, -C0],
[-C1,  C2,  C0],
[-C1, -C2, -C0]],
faces = [
[ 14 ,  0, 12,  2],
[ 15 ,  1, 13,  3],
[ 17 ,  5, 16,  4],
[ 18 ,  6, 19,  7],
[ 22 , 11, 21,  8],
[ 23 , 10, 20,  9],
[ 14 ,  8,  0],
[ 15 ,  9,  1],
[ 12 , 10,  2],
[ 13 , 11,  3],
[ 16 ,  0,  4],
[ 17 ,  1,  5],
[ 18 ,  2,  6],
[ 19 ,  3,  7],
[ 21 ,  4,  8],
[ 20 ,  5,  9],
[ 23 ,  6, 10],
[ 22 ,  7, 11],
[  0 , 16, 12],
[  1 , 17, 13],
[  2 , 18, 14],
[  3 , 19, 15],
[  5 , 20, 16],
[  4 , 21, 17],
[  7 , 22, 18],
[  6 , 23, 19],
[ 10 , 12, 20],
[ 11 , 13, 21],
[  8 , 14, 22],
[  9 , 15, 23],
[  4 ,  0,  8],
[  5 ,  1,  9],
[  6 ,  2, 10],
[  7 ,  3, 11],
[ 16 , 20, 12],
[ 17 , 21, 13],
[ 18 , 22, 14],
[ 19 , 23, 15]]
);

function Rhombicosidodecahedron() = 
// source:  http://dmccooey.com/polyhedra/Rhombicosidodecahedron.txt
// generated by  http://kitwallace.co.uk/3d/solid-index.xq
let(C0 = 0.809016994374947424102293417183)
let(C1 = 1.30901699437494742410229341718)
let(C2 = 1.61803398874989484820458683437)
let(C3 = 1.80901699437494742410229341718)
let(C4 = 2.11803398874989484820458683437)
poly(name = "Rhombicosidodecahedron",
// 5 sided faces = 12
// 4 sided faces = 30
// 3 sided faces = 20
vertices = [
[ 0.5,  0.5,   C4],
[ 0.5,  0.5,  -C4],
[ 0.5, -0.5,   C4],
[ 0.5, -0.5,  -C4],
[-0.5,  0.5,   C4],
[-0.5,  0.5,  -C4],
[-0.5, -0.5,   C4],
[-0.5, -0.5,  -C4],
[  C4,  0.5,  0.5],
[  C4,  0.5, -0.5],
[  C4, -0.5,  0.5],
[  C4, -0.5, -0.5],
[ -C4,  0.5,  0.5],
[ -C4,  0.5, -0.5],
[ -C4, -0.5,  0.5],
[ -C4, -0.5, -0.5],
[ 0.5,   C4,  0.5],
[ 0.5,   C4, -0.5],
[ 0.5,  -C4,  0.5],
[ 0.5,  -C4, -0.5],
[-0.5,   C4,  0.5],
[-0.5,   C4, -0.5],
[-0.5,  -C4,  0.5],
[-0.5,  -C4, -0.5],
[ 0.0,   C1,   C3],
[ 0.0,   C1,  -C3],
[ 0.0,  -C1,   C3],
[ 0.0,  -C1,  -C3],
[  C3,  0.0,   C1],
[  C3,  0.0,  -C1],
[ -C3,  0.0,   C1],
[ -C3,  0.0,  -C1],
[  C1,   C3,  0.0],
[  C1,  -C3,  0.0],
[ -C1,   C3,  0.0],
[ -C1,  -C3,  0.0],
[  C1,   C0,   C2],
[  C1,   C0,  -C2],
[  C1,  -C0,   C2],
[  C1,  -C0,  -C2],
[ -C1,   C0,   C2],
[ -C1,   C0,  -C2],
[ -C1,  -C0,   C2],
[ -C1,  -C0,  -C2],
[  C2,   C1,   C0],
[  C2,   C1,  -C0],
[  C2,  -C1,   C0],
[  C2,  -C1,  -C0],
[ -C2,   C1,   C0],
[ -C2,   C1,  -C0],
[ -C2,  -C1,   C0],
[ -C2,  -C1,  -C0],
[  C0,   C2,   C1],
[  C0,   C2,  -C1],
[  C0,  -C2,   C1],
[  C0,  -C2,  -C1],
[ -C0,   C2,   C1],
[ -C0,   C2,  -C1],
[ -C0,  -C2,   C1],
[ -C0,  -C2,  -C1]],
faces = [
[ 56 , 20, 16, 52, 24],
[ 53 , 17, 21, 57, 25],
[ 54 , 18, 22, 58, 26],
[ 59 , 23, 19, 55, 27],
[ 38 ,  2,  0, 36, 28],
[ 37 ,  1,  3, 39, 29],
[ 40 ,  4,  6, 42, 30],
[ 43 ,  7,  5, 41, 31],
[ 45 ,  9,  8, 44, 32],
[ 46 , 10, 11, 47, 33],
[ 48 , 12, 13, 49, 34],
[ 51 , 15, 14, 50, 35],
[ 24 , 52, 36,  0],
[ 37 , 53, 25,  1],
[ 38 , 54, 26,  2],
[ 27 , 55, 39,  3],
[ 40 , 56, 24,  4],
[ 25 , 57, 41,  5],
[ 26 , 58, 42,  6],
[ 43 , 59, 27,  7],
[ 28 , 36, 44,  8],
[ 45 , 37, 29,  9],
[ 46 , 38, 28, 10],
[ 29 , 39, 47, 11],
[ 48 , 40, 30, 12],
[ 31 , 41, 49, 13],
[ 30 , 42, 50, 14],
[ 51 , 43, 31, 15],
[ 32 , 44, 52, 16],
[ 53 , 45, 32, 17],
[ 54 , 46, 33, 18],
[ 33 , 47, 55, 19],
[ 56 , 48, 34, 20],
[ 34 , 49, 57, 21],
[ 35 , 50, 58, 22],
[ 59 , 51, 35, 23],
[  2 ,  6,  4,  0],
[  5 ,  7,  3,  1],
[  9 , 11, 10,  8],
[ 14 , 15, 13, 12],
[ 20 , 21, 17, 16],
[ 19 , 23, 22, 18],
[  0 ,  4, 24],
[  5 ,  1, 25],
[  6 ,  2, 26],
[  3 ,  7, 27],
[  8 , 10, 28],
[ 11 ,  9, 29],
[ 14 , 12, 30],
[ 13 , 15, 31],
[ 16 , 17, 32],
[ 19 , 18, 33],
[ 21 , 20, 34],
[ 22 , 23, 35],
[ 52 , 44, 36],
[ 45 , 53, 37],
[ 46 , 54, 38],
[ 55 , 47, 39],
[ 48 , 56, 40],
[ 57 , 49, 41],
[ 58 , 50, 42],
[ 51 , 59, 43]]
);

function Rhombicuboctahedron() = 
// source:  http://dmccooey.com/polyhedra/Rhombicuboctahedron.txt
// generated by  http://kitwallace.co.uk/3d/solid-index.xq
let(C0 = 1.20710678118654752440084436210)
poly(name = "Rhombicuboctahedron",
// 4 sided faces = 18
// 3 sided faces = 8
vertices = [
[ 0.5,  0.5,   C0],
[ 0.5,  0.5,  -C0],
[ 0.5, -0.5,   C0],
[ 0.5, -0.5,  -C0],
[-0.5,  0.5,   C0],
[-0.5,  0.5,  -C0],
[-0.5, -0.5,   C0],
[-0.5, -0.5,  -C0],
[  C0,  0.5,  0.5],
[  C0,  0.5, -0.5],
[  C0, -0.5,  0.5],
[  C0, -0.5, -0.5],
[ -C0,  0.5,  0.5],
[ -C0,  0.5, -0.5],
[ -C0, -0.5,  0.5],
[ -C0, -0.5, -0.5],
[ 0.5,   C0,  0.5],
[ 0.5,   C0, -0.5],
[ 0.5,  -C0,  0.5],
[ 0.5,  -C0, -0.5],
[-0.5,   C0,  0.5],
[-0.5,   C0, -0.5],
[-0.5,  -C0,  0.5],
[-0.5,  -C0, -0.5]],
faces = [
[  2 ,  6,  4,  0],
[  5 ,  7,  3,  1],
[  9 , 11, 10,  8],
[ 14 , 15, 13, 12],
[ 20 , 21, 17, 16],
[ 19 , 23, 22, 18],
[  8 , 10,  2,  0],
[  4 , 20, 16,  0],
[ 23 , 19,  3,  7],
[  5 , 13, 15,  7],
[  9 ,  1,  3, 11],
[ 19 , 18, 10, 11],
[  4 ,  6, 14, 12],
[ 13 , 21, 20, 12],
[ 21 ,  5,  1, 17],
[  9 ,  8, 16, 17],
[ 23 , 15, 14, 22],
[  6 ,  2, 18, 22],
[ 16 ,  8,  0],
[  9 , 17,  1],
[ 10 , 18,  2],
[ 19 , 11,  3],
[ 12 , 20,  4],
[ 21 , 13,  5],
[ 22 , 14,  6],
[ 15 , 23,  7]]
);

function RsnubDodecahedron() = 
// source:  http://dmccooey.com/polyhedra/RsnubDodecahedron.txt
// generated by  http://kitwallace.co.uk/3d/solid-index.xq
let(C0  = 0.192893711352359022108262546061)
let(C1  = 0.330921024729844230963655269187)
let(C2  = 0.374821658114562295266609516608)
let(C3  = 0.567715369466921317374872062669)
let(C4  = 0.643029605914072573107464141441)
let(C5  = 0.728335176957191477360671629838)
let(C6  = 0.847550046789060797396217956030)
let(C7  = 1.103156835071753772627281146446)
let(C8  = 1.24950378846302719500774109632)
let(C9  = 1.41526541625598211477109001870)
let(C10 = 1.45402422933801541929649491091)
let(C11 = 1.64691794069037444140475745697)
let(C12 = 1.74618644098582634573474528789)
let(C13 = 1.97783896542021867236841272616)
let(C14 = 2.097053835252087992403959052348)
poly(name = "Snub Dodecahedron",
// 5 sided faces = 12
// 3 sided faces = 80
vertices = [
[  C2,   C1,  C14],
[  C2,  -C1, -C14],
[ -C2,  -C1,  C14],
[ -C2,   C1, -C14],
[ C14,   C2,   C1],
[ C14,  -C2,  -C1],
[-C14,  -C2,   C1],
[-C14,   C2,  -C1],
[  C1,  C14,   C2],
[  C1, -C14,  -C2],
[ -C1, -C14,   C2],
[ -C1,  C14,  -C2],
[  C3,  -C4,  C13],
[  C3,   C4, -C13],
[ -C3,   C4,  C13],
[ -C3,  -C4, -C13],
[ C13,  -C3,   C4],
[ C13,   C3,  -C4],
[-C13,   C3,   C4],
[-C13,  -C3,  -C4],
[  C4, -C13,   C3],
[  C4,  C13,  -C3],
[ -C4,  C13,   C3],
[ -C4, -C13,  -C3],
[  C0,   C8,  C12],
[  C0,  -C8, -C12],
[ -C0,  -C8,  C12],
[ -C0,   C8, -C12],
[ C12,   C0,   C8],
[ C12,  -C0,  -C8],
[-C12,  -C0,   C8],
[-C12,   C0,  -C8],
[  C8,  C12,   C0],
[  C8, -C12,  -C0],
[ -C8, -C12,   C0],
[ -C8,  C12,  -C0],
[  C7,   C6,  C11],
[  C7,  -C6, -C11],
[ -C7,  -C6,  C11],
[ -C7,   C6, -C11],
[ C11,   C7,   C6],
[ C11,  -C7,  -C6],
[-C11,  -C7,   C6],
[-C11,   C7,  -C6],
[  C6,  C11,   C7],
[  C6, -C11,  -C7],
[ -C6, -C11,   C7],
[ -C6,  C11,  -C7],
[  C9,  -C5,  C10],
[  C9,   C5, -C10],
[ -C9,   C5,  C10],
[ -C9,  -C5, -C10],
[ C10,  -C9,   C5],
[ C10,   C9,  -C5],
[-C10,   C9,   C5],
[-C10,  -C9,  -C5],
[  C5, -C10,   C9],
[  C5,  C10,  -C9],
[ -C5,  C10,   C9],
[ -C5, -C10,  -C9]],
faces = [
[ 36 , 28, 48, 12,  0],
[ 37 , 29, 49, 13,  1],
[ 38 , 30, 50, 14,  2],
[ 39 , 31, 51, 15,  3],
[ 40 , 32, 53, 17,  4],
[ 41 , 33, 52, 16,  5],
[ 42 , 34, 55, 19,  6],
[ 43 , 35, 54, 18,  7],
[ 44 , 24, 58, 22,  8],
[ 45 , 25, 59, 23,  9],
[ 46 , 26, 56, 20, 10],
[ 47 , 27, 57, 21, 11],
[  2 , 14,  0],
[  3 , 15,  1],
[  0 , 12,  2],
[  1 , 13,  3],
[  5 , 16,  4],
[  4 , 17,  5],
[  7 , 18,  6],
[  6 , 19,  7],
[ 11 , 21,  8],
[ 10 , 20,  9],
[  9 , 23, 10],
[  8 , 22, 11],
[ 48 , 56, 12],
[ 49 , 57, 13],
[ 50 , 58, 14],
[ 51 , 59, 15],
[ 52 , 48, 16],
[ 53 , 49, 17],
[ 54 , 50, 18],
[ 55 , 51, 19],
[ 56 , 52, 20],
[ 57 , 53, 21],
[ 58 , 54, 22],
[ 59 , 55, 23],
[ 44 , 36, 24],
[ 45 , 37, 25],
[ 46 , 38, 26],
[ 47 , 39, 27],
[ 36 , 40, 28],
[ 37 , 41, 29],
[ 38 , 42, 30],
[ 39 , 43, 31],
[ 40 , 44, 32],
[ 41 , 45, 33],
[ 42 , 46, 34],
[ 43 , 47, 35],
[  0 , 24, 36],
[  1 , 25, 37],
[  2 , 26, 38],
[  3 , 27, 39],
[  4 , 28, 40],
[  5 , 29, 41],
[  6 , 30, 42],
[  7 , 31, 43],
[  8 , 32, 44],
[  9 , 33, 45],
[ 10 , 34, 46],
[ 11 , 35, 47],
[ 28 , 16, 48],
[ 29 , 17, 49],
[ 30 , 18, 50],
[ 31 , 19, 51],
[ 33 , 20, 52],
[ 32 , 21, 53],
[ 35 , 22, 54],
[ 34 , 23, 55],
[ 26 , 12, 56],
[ 27 , 13, 57],
[ 24 , 14, 58],
[ 25 , 15, 59],
[  0 , 14, 24],
[  1 , 15, 25],
[  2 , 12, 26],
[  3 , 13, 27],
[  4 , 16, 28],
[  5 , 17, 29],
[  6 , 18, 30],
[  7 , 19, 31],
[  8 , 21, 32],
[  9 , 20, 33],
[ 10 , 23, 34],
[ 11 , 22, 35],
[ 44 , 40, 36],
[ 45 , 41, 37],
[ 46 , 42, 38],
[ 47 , 43, 39],
[ 52 , 56, 48],
[ 53 , 57, 49],
[ 54 , 58, 50],
[ 55 , 59, 51]]
);

function TruncatedCube() = 
// source:  http://dmccooey.com/polyhedra/TruncatedCube.txt
// generated by  http://kitwallace.co.uk/3d/solid-index.xq
let(C0 = 1.20710678118654752440084436210)
poly(name = "Truncated Cube",
// 8 sided faces = 6
// 3 sided faces = 8
vertices = [
[  C0,  0.5,   C0],
[  C0,  0.5,  -C0],
[  C0, -0.5,   C0],
[  C0, -0.5,  -C0],
[ -C0,  0.5,   C0],
[ -C0,  0.5,  -C0],
[ -C0, -0.5,   C0],
[ -C0, -0.5,  -C0],
[  C0,   C0,  0.5],
[  C0,   C0, -0.5],
[  C0,  -C0,  0.5],
[  C0,  -C0, -0.5],
[ -C0,   C0,  0.5],
[ -C0,   C0, -0.5],
[ -C0,  -C0,  0.5],
[ -C0,  -C0, -0.5],
[ 0.5,   C0,   C0],
[ 0.5,   C0,  -C0],
[ 0.5,  -C0,   C0],
[ 0.5,  -C0,  -C0],
[-0.5,   C0,   C0],
[-0.5,   C0,  -C0],
[-0.5,  -C0,   C0],
[-0.5,  -C0,  -C0]],
faces = [
[  8 ,  9,  1,  3, 11, 10,  2,  0],
[  2 , 18, 22,  6,  4, 20, 16,  0],
[  4 ,  6, 14, 15,  7,  5, 13, 12],
[ 13 , 21, 17,  9,  8, 16, 20, 12],
[  3 ,  1, 17, 21,  5,  7, 23, 19],
[ 23 , 15, 14, 22, 18, 10, 11, 19],
[ 16 ,  8,  0],
[  9 , 17,  1],
[ 10 , 18,  2],
[ 19 , 11,  3],
[ 12 , 20,  4],
[ 21 , 13,  5],
[ 22 , 14,  6],
[ 15 , 23,  7]]
);

function TruncatedCuboctahedron() = 
// source:  http://dmccooey.com/polyhedra/TruncatedCuboctahedron.txt
// generated by  http://kitwallace.co.uk/3d/solid-index.xq
let(C0 = 1.20710678118654752440084436210)
let(C1 = 1.91421356237309504880168872421)
poly(name = "Truncated Cuboctahedron",
// 8 sided faces = 6
// 6 sided faces = 8
// 4 sided faces = 12
vertices = [
[  C0,  0.5,   C1],
[  C0,  0.5,  -C1],
[  C0, -0.5,   C1],
[  C0, -0.5,  -C1],
[ -C0,  0.5,   C1],
[ -C0,  0.5,  -C1],
[ -C0, -0.5,   C1],
[ -C0, -0.5,  -C1],
[  C1,   C0,  0.5],
[  C1,   C0, -0.5],
[  C1,  -C0,  0.5],
[  C1,  -C0, -0.5],
[ -C1,   C0,  0.5],
[ -C1,   C0, -0.5],
[ -C1,  -C0,  0.5],
[ -C1,  -C0, -0.5],
[ 0.5,   C1,   C0],
[ 0.5,   C1,  -C0],
[ 0.5,  -C1,   C0],
[ 0.5,  -C1,  -C0],
[-0.5,   C1,   C0],
[-0.5,   C1,  -C0],
[-0.5,  -C1,   C0],
[-0.5,  -C1,  -C0],
[ 0.5,   C0,   C1],
[ 0.5,   C0,  -C1],
[ 0.5,  -C0,   C1],
[ 0.5,  -C0,  -C1],
[-0.5,   C0,   C1],
[-0.5,   C0,  -C1],
[-0.5,  -C0,   C1],
[-0.5,  -C0,  -C1],
[  C1,  0.5,   C0],
[  C1,  0.5,  -C0],
[  C1, -0.5,   C0],
[  C1, -0.5,  -C0],
[ -C1,  0.5,   C0],
[ -C1,  0.5,  -C0],
[ -C1, -0.5,   C0],
[ -C1, -0.5,  -C0],
[  C0,   C1,  0.5],
[  C0,   C1, -0.5],
[  C0,  -C1,  0.5],
[  C0,  -C1, -0.5],
[ -C0,   C1,  0.5],
[ -C0,   C1, -0.5],
[ -C0,  -C1,  0.5],
[ -C0,  -C1, -0.5]],
faces = [
[  2 , 26, 30,  6,  4, 28, 24,  0],
[ 25 , 29,  5,  7, 31, 27,  3,  1],
[  9 , 33, 35, 11, 10, 34, 32,  8],
[ 36 , 38, 14, 15, 39, 37, 13, 12],
[ 20 , 44, 45, 21, 17, 41, 40, 16],
[ 42 , 43, 19, 23, 47, 46, 22, 18],
[ 24 , 16, 40,  8, 32,  0],
[ 33 ,  9, 41, 17, 25,  1],
[ 34 , 10, 42, 18, 26,  2],
[ 27 , 19, 43, 11, 35,  3],
[ 36 , 12, 44, 20, 28,  4],
[ 29 , 21, 45, 13, 37,  5],
[ 30 , 22, 46, 14, 38,  6],
[ 39 , 15, 47, 23, 31,  7],
[ 32 , 34,  2,  0],
[  3 , 35, 33,  1],
[  6 , 38, 36,  4],
[ 37 , 39,  7,  5],
[ 40 , 41,  9,  8],
[ 11 , 43, 42, 10],
[ 13 , 45, 44, 12],
[ 46 , 47, 15, 14],
[ 24 , 28, 20, 16],
[ 21 , 29, 25, 17],
[ 22 , 30, 26, 18],
[ 27 , 31, 23, 19]]
);

function TruncatedDodecahedron() = 
// source:  http://dmccooey.com/polyhedra/TruncatedDodecahedron.txt
// generated by  http://kitwallace.co.uk/3d/solid-index.xq
let(C0 = 1.30901699437494742410229341718)
let(C1 = 1.61803398874989484820458683437)
let(C2 = 2.11803398874989484820458683437)
let(C3 = 2.61803398874989484820458683437)
let(C4 = 2.927050983124842272306880251548)
poly(name = "Truncated Dodecahedron",
// 10 sided faces = 12
// 3 sided faces = 20
vertices = [
[ 0.0,  0.5,   C4],
[ 0.0,  0.5,  -C4],
[ 0.0, -0.5,   C4],
[ 0.0, -0.5,  -C4],
[  C4,  0.0,  0.5],
[  C4,  0.0, -0.5],
[ -C4,  0.0,  0.5],
[ -C4,  0.0, -0.5],
[ 0.5,   C4,  0.0],
[ 0.5,  -C4,  0.0],
[-0.5,   C4,  0.0],
[-0.5,  -C4,  0.0],
[ 0.5,   C0,   C3],
[ 0.5,   C0,  -C3],
[ 0.5,  -C0,   C3],
[ 0.5,  -C0,  -C3],
[-0.5,   C0,   C3],
[-0.5,   C0,  -C3],
[-0.5,  -C0,   C3],
[-0.5,  -C0,  -C3],
[  C3,  0.5,   C0],
[  C3,  0.5,  -C0],
[  C3, -0.5,   C0],
[  C3, -0.5,  -C0],
[ -C3,  0.5,   C0],
[ -C3,  0.5,  -C0],
[ -C3, -0.5,   C0],
[ -C3, -0.5,  -C0],
[  C0,   C3,  0.5],
[  C0,   C3, -0.5],
[  C0,  -C3,  0.5],
[  C0,  -C3, -0.5],
[ -C0,   C3,  0.5],
[ -C0,   C3, -0.5],
[ -C0,  -C3,  0.5],
[ -C0,  -C3, -0.5],
[  C0,   C1,   C2],
[  C0,   C1,  -C2],
[  C0,  -C1,   C2],
[  C0,  -C1,  -C2],
[ -C0,   C1,   C2],
[ -C0,   C1,  -C2],
[ -C0,  -C1,   C2],
[ -C0,  -C1,  -C2],
[  C2,   C0,   C1],
[  C2,   C0,  -C1],
[  C2,  -C0,   C1],
[  C2,  -C0,  -C1],
[ -C2,   C0,   C1],
[ -C2,   C0,  -C1],
[ -C2,  -C0,   C1],
[ -C2,  -C0,  -C1],
[  C1,   C2,   C0],
[  C1,   C2,  -C0],
[  C1,  -C2,   C0],
[  C1,  -C2,  -C0],
[ -C1,   C2,   C0],
[ -C1,   C2,  -C0],
[ -C1,  -C2,   C0],
[ -C1,  -C2,  -C0]],
faces = [
[ 12 , 36, 44, 20, 22, 46, 38, 14,  2,  0],
[ 17 , 41, 49, 25, 27, 51, 43, 19,  3,  1],
[ 18 , 42, 50, 26, 24, 48, 40, 16,  0,  2],
[ 15 , 39, 47, 23, 21, 45, 37, 13,  1,  3],
[ 20 , 44, 52, 28, 29, 53, 45, 21,  5,  4],
[ 23 , 47, 55, 31, 30, 54, 46, 22,  4,  5],
[ 26 , 50, 58, 34, 35, 59, 51, 27,  7,  6],
[ 25 , 49, 57, 33, 32, 56, 48, 24,  6,  7],
[ 28 , 52, 36, 12, 16, 40, 56, 32, 10,  8],
[ 31 , 55, 39, 15, 19, 43, 59, 35, 11,  9],
[ 33 , 57, 41, 17, 13, 37, 53, 29,  8, 10],
[ 34 , 58, 42, 18, 14, 38, 54, 30,  9, 11],
[ 16 , 12,  0],
[ 13 , 17,  1],
[ 14 , 18,  2],
[ 19 , 15,  3],
[ 22 , 20,  4],
[ 21 , 23,  5],
[ 24 , 26,  6],
[ 27 , 25,  7],
[ 29 , 28,  8],
[ 30 , 31,  9],
[ 32 , 33, 10],
[ 35 , 34, 11],
[ 52 , 44, 36],
[ 45 , 53, 37],
[ 46 , 54, 38],
[ 55 , 47, 39],
[ 48 , 56, 40],
[ 57 , 49, 41],
[ 58 , 50, 42],
[ 51 , 59, 43]]
);

function TruncatedIcosahedron() = 
// source:  http://dmccooey.com/polyhedra/TruncatedIcosahedron.txt
// generated by  http://kitwallace.co.uk/3d/solid-index.xq
let(C0 = 0.809016994374947424102293417183)
let(C1 = 1.61803398874989484820458683437)
let(C2 = 1.80901699437494742410229341718)
let(C3 = 2.11803398874989484820458683437)
let(C4 = 2.427050983124842272306880251548)
poly(name = "Truncated Icosahedron",
// 6 sided faces = 20
// 5 sided faces = 12
vertices = [
[ 0.5,  0.0,   C4],
[ 0.5,  0.0,  -C4],
[-0.5,  0.0,   C4],
[-0.5,  0.0,  -C4],
[  C4,  0.5,  0.0],
[  C4, -0.5,  0.0],
[ -C4,  0.5,  0.0],
[ -C4, -0.5,  0.0],
[ 0.0,   C4,  0.5],
[ 0.0,   C4, -0.5],
[ 0.0,  -C4,  0.5],
[ 0.0,  -C4, -0.5],
[ 1.0,   C0,   C3],
[ 1.0,   C0,  -C3],
[ 1.0,  -C0,   C3],
[ 1.0,  -C0,  -C3],
[-1.0,   C0,   C3],
[-1.0,   C0,  -C3],
[-1.0,  -C0,   C3],
[-1.0,  -C0,  -C3],
[  C3,  1.0,   C0],
[  C3,  1.0,  -C0],
[  C3, -1.0,   C0],
[  C3, -1.0,  -C0],
[ -C3,  1.0,   C0],
[ -C3,  1.0,  -C0],
[ -C3, -1.0,   C0],
[ -C3, -1.0,  -C0],
[  C0,   C3,  1.0],
[  C0,   C3, -1.0],
[  C0,  -C3,  1.0],
[  C0,  -C3, -1.0],
[ -C0,   C3,  1.0],
[ -C0,   C3, -1.0],
[ -C0,  -C3,  1.0],
[ -C0,  -C3, -1.0],
[ 0.5,   C1,   C2],
[ 0.5,   C1,  -C2],
[ 0.5,  -C1,   C2],
[ 0.5,  -C1,  -C2],
[-0.5,   C1,   C2],
[-0.5,   C1,  -C2],
[-0.5,  -C1,   C2],
[-0.5,  -C1,  -C2],
[  C2,  0.5,   C1],
[  C2,  0.5,  -C1],
[  C2, -0.5,   C1],
[  C2, -0.5,  -C1],
[ -C2,  0.5,   C1],
[ -C2,  0.5,  -C1],
[ -C2, -0.5,   C1],
[ -C2, -0.5,  -C1],
[  C1,   C2,  0.5],
[  C1,   C2, -0.5],
[  C1,  -C2,  0.5],
[  C1,  -C2, -0.5],
[ -C1,   C2,  0.5],
[ -C1,   C2, -0.5],
[ -C1,  -C2,  0.5],
[ -C1,  -C2, -0.5]],
faces = [
[ 14 , 38, 42, 18,  2,  0],
[ 13 , 37, 41, 17,  3,  1],
[ 16 , 40, 36, 12,  0,  2],
[ 19 , 43, 39, 15,  1,  3],
[ 21 , 45, 47, 23,  5,  4],
[ 22 , 46, 44, 20,  4,  5],
[ 24 , 48, 50, 26,  7,  6],
[ 27 , 51, 49, 25,  6,  7],
[ 32 , 56, 57, 33,  9,  8],
[ 29 , 53, 52, 28,  8,  9],
[ 30 , 54, 55, 31, 11, 10],
[ 35 , 59, 58, 34, 10, 11],
[ 36 , 28, 52, 20, 44, 12],
[ 45 , 21, 53, 29, 37, 13],
[ 46 , 22, 54, 30, 38, 14],
[ 39 , 31, 55, 23, 47, 15],
[ 48 , 24, 56, 32, 40, 16],
[ 41 , 33, 57, 25, 49, 17],
[ 42 , 34, 58, 26, 50, 18],
[ 51 , 27, 59, 35, 43, 19],
[ 12 , 44, 46, 14,  0],
[ 15 , 47, 45, 13,  1],
[ 18 , 50, 48, 16,  2],
[ 17 , 49, 51, 19,  3],
[ 20 , 52, 53, 21,  4],
[ 23 , 55, 54, 22,  5],
[ 25 , 57, 56, 24,  6],
[ 26 , 58, 59, 27,  7],
[ 28 , 36, 40, 32,  8],
[ 33 , 41, 37, 29,  9],
[ 34 , 42, 38, 30, 10],
[ 31 , 39, 43, 35, 11]]
);

function TruncatedIcosidodecahedron() = 
// source:  http://dmccooey.com/polyhedra/TruncatedIcosidodecahedron.txt
// generated by  http://kitwallace.co.uk/3d/solid-index.xq
let(C0 = 1.30901699437494742410229341718)
let(C1 = 1.61803398874989484820458683437)
let(C2 = 1.80901699437494742410229341718)
let(C3 = 2.11803398874989484820458683437)
let(C4 = 2.427050983124842272306880251548)
let(C5 = 2.61803398874989484820458683437)
let(C6 = 2.927050983124842272306880251548)
let(C7 = 3.11803398874989484820458683437)
let(C8 = 3.427050983124842272306880251548)
let(C9 = 3.73606797749978969640917366873)
poly(name = "Truncated Icosidodecahedron",
// 10 sided faces = 12
// 6 sided faces = 20
// 4 sided faces = 30
vertices = [
[ 0.5,  0.5,   C9],
[ 0.5,  0.5,  -C9],
[ 0.5, -0.5,   C9],
[ 0.5, -0.5,  -C9],
[-0.5,  0.5,   C9],
[-0.5,  0.5,  -C9],
[-0.5, -0.5,   C9],
[-0.5, -0.5,  -C9],
[  C9,  0.5,  0.5],
[  C9,  0.5, -0.5],
[  C9, -0.5,  0.5],
[  C9, -0.5, -0.5],
[ -C9,  0.5,  0.5],
[ -C9,  0.5, -0.5],
[ -C9, -0.5,  0.5],
[ -C9, -0.5, -0.5],
[ 0.5,   C9,  0.5],
[ 0.5,   C9, -0.5],
[ 0.5,  -C9,  0.5],
[ 0.5,  -C9, -0.5],
[-0.5,   C9,  0.5],
[-0.5,   C9, -0.5],
[-0.5,  -C9,  0.5],
[-0.5,  -C9, -0.5],
[ 1.0,   C0,   C8],
[ 1.0,   C0,  -C8],
[ 1.0,  -C0,   C8],
[ 1.0,  -C0,  -C8],
[-1.0,   C0,   C8],
[-1.0,   C0,  -C8],
[-1.0,  -C0,   C8],
[-1.0,  -C0,  -C8],
[  C8,  1.0,   C0],
[  C8,  1.0,  -C0],
[  C8, -1.0,   C0],
[  C8, -1.0,  -C0],
[ -C8,  1.0,   C0],
[ -C8,  1.0,  -C0],
[ -C8, -1.0,   C0],
[ -C8, -1.0,  -C0],
[  C0,   C8,  1.0],
[  C0,   C8, -1.0],
[  C0,  -C8,  1.0],
[  C0,  -C8, -1.0],
[ -C0,   C8,  1.0],
[ -C0,   C8, -1.0],
[ -C0,  -C8,  1.0],
[ -C0,  -C8, -1.0],
[ 0.5,   C3,   C7],
[ 0.5,   C3,  -C7],
[ 0.5,  -C3,   C7],
[ 0.5,  -C3,  -C7],
[-0.5,   C3,   C7],
[-0.5,   C3,  -C7],
[-0.5,  -C3,   C7],
[-0.5,  -C3,  -C7],
[  C7,  0.5,   C3],
[  C7,  0.5,  -C3],
[  C7, -0.5,   C3],
[  C7, -0.5,  -C3],
[ -C7,  0.5,   C3],
[ -C7,  0.5,  -C3],
[ -C7, -0.5,   C3],
[ -C7, -0.5,  -C3],
[  C3,   C7,  0.5],
[  C3,   C7, -0.5],
[  C3,  -C7,  0.5],
[  C3,  -C7, -0.5],
[ -C3,   C7,  0.5],
[ -C3,   C7, -0.5],
[ -C3,  -C7,  0.5],
[ -C3,  -C7, -0.5],
[  C2,   C1,   C6],
[  C2,   C1,  -C6],
[  C2,  -C1,   C6],
[  C2,  -C1,  -C6],
[ -C2,   C1,   C6],
[ -C2,   C1,  -C6],
[ -C2,  -C1,   C6],
[ -C2,  -C1,  -C6],
[  C6,   C2,   C1],
[  C6,   C2,  -C1],
[  C6,  -C2,   C1],
[  C6,  -C2,  -C1],
[ -C6,   C2,   C1],
[ -C6,   C2,  -C1],
[ -C6,  -C2,   C1],
[ -C6,  -C2,  -C1],
[  C1,   C6,   C2],
[  C1,   C6,  -C2],
[  C1,  -C6,   C2],
[  C1,  -C6,  -C2],
[ -C1,   C6,   C2],
[ -C1,   C6,  -C2],
[ -C1,  -C6,   C2],
[ -C1,  -C6,  -C2],
[  C0,   C4,   C5],
[  C0,   C4,  -C5],
[  C0,  -C4,   C5],
[  C0,  -C4,  -C5],
[ -C0,   C4,   C5],
[ -C0,   C4,  -C5],
[ -C0,  -C4,   C5],
[ -C0,  -C4,  -C5],
[  C5,   C0,   C4],
[  C5,   C0,  -C4],
[  C5,  -C0,   C4],
[  C5,  -C0,  -C4],
[ -C5,   C0,   C4],
[ -C5,   C0,  -C4],
[ -C5,  -C0,   C4],
[ -C5,  -C0,  -C4],
[  C4,   C5,   C0],
[  C4,   C5,  -C0],
[  C4,  -C5,   C0],
[  C4,  -C5,  -C0],
[ -C4,   C5,   C0],
[ -C4,   C5,  -C0],
[ -C4,  -C5,   C0],
[ -C4,  -C5,  -C0]],
faces = [
[  24 ,  72, 104,  56,  58, 106,  74,  26,   2,   0],
[   3 ,  27,  75, 107,  59,  57, 105,  73,  25,   1],
[   6 ,  30,  78, 110,  62,  60, 108,  76,  28,   4],
[  29 ,  77, 109,  61,  63, 111,  79,  31,   7,   5],
[  32 ,  80, 112,  64,  65, 113,  81,  33,   9,   8],
[  11 ,  35,  83, 115,  67,  66, 114,  82,  34,  10],
[  13 ,  37,  85, 117,  69,  68, 116,  84,  36,  12],
[  38 ,  86, 118,  70,  71, 119,  87,  39,  15,  14],
[  40 ,  88,  96,  48,  52, 100,  92,  44,  20,  16],
[  21 ,  45,  93, 101,  53,  49,  97,  89,  41,  17],
[  22 ,  46,  94, 102,  54,  50,  98,  90,  42,  18],
[  43 ,  91,  99,  51,  55, 103,  95,  47,  23,  19],
[   4 ,  28,  52,  48,  24,   0],
[  25 ,  49,  53,  29,   5,   1],
[  26 ,  50,  54,  30,   6,   2],
[   7 ,  31,  55,  51,  27,   3],
[  10 ,  34,  58,  56,  32,   8],
[  33 ,  57,  59,  35,  11,   9],
[  36 ,  60,  62,  38,  14,  12],
[  15 ,  39,  63,  61,  37,  13],
[  17 ,  41,  65,  64,  40,  16],
[  42 ,  66,  67,  43,  19,  18],
[  44 ,  68,  69,  45,  21,  20],
[  23 ,  47,  71,  70,  46,  22],
[  96 ,  88, 112,  80, 104,  72],
[ 105 ,  81, 113,  89,  97,  73],
[ 106 ,  82, 114,  90,  98,  74],
[  99 ,  91, 115,  83, 107,  75],
[ 108 ,  84, 116,  92, 100,  76],
[ 101 ,  93, 117,  85, 109,  77],
[ 102 ,  94, 118,  86, 110,  78],
[ 111 ,  87, 119,  95, 103,  79],
[   2 ,   6,   4,   0],
[   5 ,   7,   3,   1],
[   9 ,  11,  10,   8],
[  14 ,  15,  13,  12],
[  20 ,  21,  17,  16],
[  19 ,  23,  22,  18],
[  48 ,  96,  72,  24],
[  73 ,  97,  49,  25],
[  74 ,  98,  50,  26],
[  51 ,  99,  75,  27],
[  76 , 100,  52,  28],
[  53 , 101,  77,  29],
[  54 , 102,  78,  30],
[  79 , 103,  55,  31],
[  56 , 104,  80,  32],
[  81 , 105,  57,  33],
[  82 , 106,  58,  34],
[  59 , 107,  83,  35],
[  84 , 108,  60,  36],
[  61 , 109,  85,  37],
[  62 , 110,  86,  38],
[  87 , 111,  63,  39],
[  64 , 112,  88,  40],
[  89 , 113,  65,  41],
[  90 , 114,  66,  42],
[  67 , 115,  91,  43],
[  92 , 116,  68,  44],
[  69 , 117,  93,  45],
[  70 , 118,  94,  46],
[  95 , 119,  71,  47]]
);

function TruncatedOctahedron() = 
// source:  http://dmccooey.com/polyhedra/TruncatedOctahedron.txt
// generated by  http://kitwallace.co.uk/3d/solid-index.xq
let(C0 = 0.7071067811865475244008443621048)
let(C1 = 1.41421356237309504880168872421)
poly(name = "Truncated Octahedron",
// 6 sided faces = 8
// 4 sided faces = 6
vertices = [
[ C0, 0.0,  C1],
[ C0, 0.0, -C1],
[-C0, 0.0,  C1],
[-C0, 0.0, -C1],
[ C1,  C0, 0.0],
[ C1, -C0, 0.0],
[-C1,  C0, 0.0],
[-C1, -C0, 0.0],
[0.0,  C1,  C0],
[0.0,  C1, -C0],
[0.0, -C1,  C0],
[0.0, -C1, -C0],
[0.0,  C0,  C1],
[0.0,  C0, -C1],
[0.0, -C0,  C1],
[0.0, -C0, -C1],
[ C1, 0.0,  C0],
[ C1, 0.0, -C0],
[-C1, 0.0,  C0],
[-C1, 0.0, -C0],
[ C0,  C1, 0.0],
[ C0, -C1, 0.0],
[-C0,  C1, 0.0],
[-C0, -C1, 0.0]],
faces = [
[ 16 ,  5, 21, 10, 14,  0],
[ 17 ,  4, 20,  9, 13,  1],
[ 18 ,  6, 22,  8, 12,  2],
[ 19 ,  7, 23, 11, 15,  3],
[ 16 ,  0, 12,  8, 20,  4],
[ 17 ,  1, 15, 11, 21,  5],
[ 18 ,  2, 14, 10, 23,  7],
[ 19 ,  3, 13,  9, 22,  6],
[ 14 ,  2, 12,  0],
[ 13 ,  3, 15,  1],
[ 17 ,  5, 16,  4],
[ 18 ,  7, 19,  6],
[ 22 ,  9, 20,  8],
[ 21 , 11, 23, 10]]
);

function TruncatedTetrahedron() = 
// source:  http://dmccooey.com/polyhedra/TruncatedTetrahedron.txt
// generated by  http://kitwallace.co.uk/3d/solid-index.xq
let(C0 = 0.353553390593273762200422181052)
let(C1 = 1.06066017177982128660126654316)
poly(name = "Truncated Tetrahedron",
// 6 sided faces = 4
// 3 sided faces = 4
vertices = [
[ C0, -C0,  C1],
[ C0,  C0, -C1],
[-C0,  C0,  C1],
[-C0, -C0, -C1],
[ C1, -C0,  C0],
[ C1,  C0, -C0],
[-C1,  C0,  C0],
[-C1, -C0, -C0],
[ C0, -C1,  C0],
[ C0,  C1, -C0],
[-C0,  C1,  C0],
[-C0, -C1, -C0]],
faces = [
[  2 , 10,  9,  5,  4,  0],
[  3 , 11,  8,  4,  5,  1],
[  0 ,  8, 11,  7,  6,  2],
[  1 ,  9, 10,  6,  7,  3],
[  4 ,  8,  0],
[  5 ,  9,  1],
[  6 , 10,  2],
[  7 , 11,  3]]
);
